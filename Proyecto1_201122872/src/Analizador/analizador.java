/* Generated By:JJTree&JavaCC: Do not edit this line. analizador.java */
package Analizador;
import java.io.*;

public class analizador/*@bgen(jjtree)*/implements analizadorTreeConstants, analizadorConstants {/*@bgen(jjtree)*/
  protected JJTanalizadorState jjtree = new JJTanalizadorState();

  final public SimpleNode Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Inicio();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Inicio() throws ParseException {
               /*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      archivo();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

/*   -------------- Instrucciones  ARchivo ---------------------*/
  final public void inst_archivo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case insertar:
      INSERTAR();
      break;
    case borrar:
      BORRAR();
      break;
    case actualizar:
      ACTUALIZAR();
      break;
    case seleccionar:
      SELECCIONAR();
      break;
    case crear:
      CREAR();
      break;
    case eliminar:
      ELIMINAR();
      break;
    case alterar:
      ALTERAR();
      break;
    case usar:
      USAR();
      break;
    case otorgar:
      OTORGAR();
      break;
    case denegar:
      DENEGAR();
      break;
    case declarar:
      DECLARAR();
      break;
    case 100:
      ASIGNACION();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void archivo() throws ParseException {
                /*@bgen(jjtree) archivo */
  SimpleNode jjtn000 = new SimpleNode(JJTARCHIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      inst_archivo();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case crear:
        case usar:
        case alterar:
        case eliminar:
        case insertar:
        case actualizar:
        case borrar:
        case seleccionar:
        case otorgar:
        case denegar:
        case declarar:
        case 100:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        inst_archivo();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*------------------------ Instrucciones ddl ------------------------------*/
  final public void TIPO() throws ParseException {
                  /*@bgen(jjtree) Tipo */
                  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        t = jj_consume_token(TEXT);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.setName(t.image);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                 jjtn000.setName(t.image);
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
        break;
      case DATETIME:
        t = jj_consume_token(DATETIME);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                   jjtn000.setName(t.image);
        break;
      case DATE:
        t = jj_consume_token(DATE);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
        break;
      case id:
        t = jj_consume_token(id);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setName(t.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void L_ATRIBUTOS() throws ParseException {
                    /*@bgen(jjtree) L_ATRIBUTOS */
  SimpleNode jjtn000 = new SimpleNode(JJTL_ATRIBUTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ATRIBUTO();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(coma);
        ATRIBUTO();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ATRIBUTO() throws ParseException {
                 /*@bgen(jjtree) ATRIBUTO */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TIPO();
      term_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VAR_PARAMETRO() throws ParseException {
                      /*@bgen(jjtree) VAR_PARAMETRO */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_PARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TIPO();
      jj_consume_token(100);
      term_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void L_VAR_PARAMETRO() throws ParseException {
                        /*@bgen(jjtree) L_VAR_PARAMETRO */
  SimpleNode jjtn000 = new SimpleNode(JJTL_VAR_PARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VAR_PARAMETRO();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(coma);
        VAR_PARAMETRO();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void L_ELEMENTOS() throws ParseException {
                    /*@bgen(jjtree) L_ELEMENTOS */
  SimpleNode jjtn000 = new SimpleNode(JJTL_ELEMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ELEMENTO();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(coma);
        ELEMENTO();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ELEMENTO() throws ParseException {
                 /*@bgen(jjtree) ELEMENTO */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ATRIBUTO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
      case no_nulo:
      case autoincrementable:
      case llave_prim:
      case llave_for:
      case unico:
        COMPLEMENTO();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void COMPLEMENTO() throws ParseException {
                    /*@bgen(jjtree) COMPLEMENTO */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      COMPLE_U_2();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case nulo:
        case no_nulo:
        case autoincrementable:
        case llave_prim:
        case llave_for:
        case unico:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        COMPLE_U_2();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void COMPLE_U_2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nulo:
    case no_nulo:
    case autoincrementable:
    case llave_prim:
    case unico:
      COMPLE_U();
      break;
    case llave_for:
      LLAVE_FOR();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void COMPLE_U() throws ParseException {
                         /*@bgen(jjtree) COMPE_U */
                         SimpleNode jjtn000 = new SimpleNode(JJTCOMPE_U);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
        t = jj_consume_token(nulo);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setName(t.image);
        break;
      case no_nulo:
        t = jj_consume_token(no_nulo);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.setName(t.image);
        break;
      case autoincrementable:
        t = jj_consume_token(autoincrementable);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.setName(t.image);
        break;
      case llave_prim:
        t = jj_consume_token(llave_prim);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(t.image);
        break;
      case unico:
        t = jj_consume_token(unico);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LLAVE_FOR() throws ParseException {
                  /*@bgen(jjtree) LLAVE_FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTLLAVE_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(llave_for);
      term_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void L_CREAR() throws ParseException {
                /*@bgen(jjtree) L_CREAR */
  SimpleNode jjtn000 = new SimpleNode(JJTL_CREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case crear:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        CREAR();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CREAR() throws ParseException {
              /*@bgen(jjtree) CREAR */
  SimpleNode jjtn000 = new SimpleNode(JJTCREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(crear);
      P_CREAR();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void P_CREAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case base_datos:
      BASE();
      break;
    case tabla:
      TABLA();
      break;
    case objeto:
      OBJETO();
      break;
    case procedimiento:
      PROCEDIMIENTO();
      break;
    case funcion:
      FUNCION();
      break;
    case usuario:
      USUARIO();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BASE() throws ParseException {
             /*@bgen(jjtree) BASE */
  SimpleNode jjtn000 = new SimpleNode(JJTBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(base_datos);
      term_id();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TABLA() throws ParseException {
              /*@bgen(jjtree) TABLA */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(tabla);
      term_id();
      jj_consume_token(abre_par);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
      case INTEGER:
      case DOUBLE:
      case BOOL:
      case DATE:
      case DATETIME:
      case id:
        L_ELEMENTOS();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OBJETO() throws ParseException {
               /*@bgen(jjtree) OBJETO */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(objeto);
      term_id();
      jj_consume_token(abre_par);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
      case INTEGER:
      case DOUBLE:
      case BOOL:
      case DATE:
      case DATETIME:
      case id:
        L_ATRIBUTOS();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PROCEDIMIENTO() throws ParseException {
                      /*@bgen(jjtree) PROCEDIMIENTO */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDIMIENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(procedimiento);
      term_id();
      jj_consume_token(abre_par);
      L_VAR_PARAMETRO();
      jj_consume_token(cierra_par);
      CUERPO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FUNCION() throws ParseException {
                /*@bgen(jjtree) FUNCION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(funcion);
      term_id();
      jj_consume_token(abre_par);
      L_VAR_PARAMETRO();
      jj_consume_token(cierra_par);
      TIPO();
      CUERPO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void USUARIO() throws ParseException {
                /*@bgen(jjtree) USUARIO */
  SimpleNode jjtn000 = new SimpleNode(JJTUSUARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(usuario);
      term_id();
      jj_consume_token(colocar);
      jj_consume_token(password);
      jj_consume_token(101);
      Cadena();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void USAR() throws ParseException {
             /*@bgen(jjtree) USAR */
  SimpleNode jjtn000 = new SimpleNode(JJTUSAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(usar);
      term_id();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void L_ID() throws ParseException {
             /*@bgen(jjtree) L_ID */
  SimpleNode jjtn000 = new SimpleNode(JJTL_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        jj_consume_token(coma);
        Id();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ALTERAR_TABLA() throws ParseException {
                      /*@bgen(jjtree) ALTERAR_TABLA */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(tabla);
      term_id();
      OPCIONES_TABLA();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OPCIONES_TABLA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      ALTERAR_AGREGAR_TABLA();
      break;
    case quitar:
      ALTERAR_QUITAR_TABLA();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ALTERAR_AGREGAR_TABLA() throws ParseException {
                              /*@bgen(jjtree) ALTERAR_AGREGAR_TABLA */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_AGREGAR_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(agregar);
      jj_consume_token(abre_par);
      L_ELEMENTOS();
      jj_consume_token(cierra_par);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ALTERAR_QUITAR_TABLA() throws ParseException {
                             /*@bgen(jjtree) ALTERAR_QUITAR_TABLA */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_QUITAR_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(quitar);
      L_ID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ALTERAR_OBJETO() throws ParseException {
                       /*@bgen(jjtree) ALTERAR_OBJETO */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(objeto);
      term_id();
      OPCIONES_OBJETO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OPCIONES_OBJETO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      ALTERAR_AGREGAR_OBJETO();
      break;
    case quitar:
      ALTERAR_QUITAR_OBJETO();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ALTERAR_AGREGAR_OBJETO() throws ParseException {
                               /*@bgen(jjtree) ALTERAR_AGREGAR_OBJETO */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_AGREGAR_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(agregar);
      jj_consume_token(abre_par);
      L_ATRIBUTOS();
      jj_consume_token(cierra_par);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ALTERAR_QUITAR_OBJETO() throws ParseException {
                              /*@bgen(jjtree) ALTERAR_QUITAR_OBJETO */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_QUITAR_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(quitar);
      L_ID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ALTERAR_USUARIO() throws ParseException {
                        /*@bgen(jjtree) ALTERAR_USUARIO */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR_USUARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(usuario);
      term_id();
      jj_consume_token(cambiar);
      jj_consume_token(password);
      jj_consume_token(101);
      Cadena();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ALTERAR() throws ParseException {
                /*@bgen(jjtree) ALTERAR */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(alterar);
      OPCIONES_ALTERAR();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OPCIONES_ALTERAR() throws ParseException {
                         /*@bgen(jjtree) OPCIONES_ALTERAR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES_ALTERAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case usuario:
        ALTERAR_USUARIO();
        break;
      case tabla:
        ALTERAR_TABLA();
        break;
      case objeto:
        ALTERAR_OBJETO();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ELIMINAR() throws ParseException {
                 /*@bgen(jjtree) ELIMINAR */
  SimpleNode jjtn000 = new SimpleNode(JJTELIMINAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(eliminar);
      OBJETO_USQL();
      term_id();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void OBJETO_USQL() throws ParseException {
                                /*@bgen(jjtree) OBJETO_USQL */
                                SimpleNode jjtn000 = new SimpleNode(JJTOBJETO_USQL);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case base_datos:
        t = jj_consume_token(base_datos);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.setName(t.image);
        break;
      case tabla:
        t = jj_consume_token(tabla);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case objeto:
        t = jj_consume_token(objeto);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.setName(t.image);
        break;
      case usuario:
        t = jj_consume_token(usuario);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.setName(t.image);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ---------------------------------------- acciones DML ----------------------------- */
  final public void INSERTAR() throws ParseException {
                 /*@bgen(jjtree) INSERTAR */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(insertar);
      jj_consume_token(en);
      jj_consume_token(tabla);
      term_id();
      jj_consume_token(abre_par);
      OPCIONES_INSERTAR();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void OPCIONES_INSERTAR() throws ParseException {
                          /*@bgen(jjtree) OPCIONES_INSERTAR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES_INSERTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        L_ID();
        jj_consume_token(cierra_par);
        jj_consume_token(valores);
        jj_consume_token(abre_par);
        Parametro_Expresion();
        jj_consume_token(cierra_par);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case donde:
          Donde();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_MENOS:
        case abre_par:
        case DECIMAL:
        case NUM:
        case CADENA:
        case id:
          Parametro_Expresion();
          jj_consume_token(cierra_par);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void Donde() throws ParseException {
              /*@bgen(jjtree) Donde */
  SimpleNode jjtn000 = new SimpleNode(JJTDONDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(donde);
      Condicion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ACTUALIZAR() throws ParseException {
                   /*@bgen(jjtree) ACTUALIZAR */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUALIZAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(actualizar);
      jj_consume_token(tabla);
      term_id();
      jj_consume_token(abre_par);
      L_ID();
      jj_consume_token(cierra_par);
      jj_consume_token(valores);
      jj_consume_token(abre_par);
      Parametro_Expresion();
      jj_consume_token(cierra_par);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case donde:
        Donde();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BORRAR() throws ParseException {
               /*@bgen(jjtree) BORRAR */
  SimpleNode jjtn000 = new SimpleNode(JJTBORRAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(borrar);
      jj_consume_token(en);
      jj_consume_token(tabla);
      term_id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case donde:
        Donde();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void SELECCIONAR() throws ParseException {
                    /*@bgen(jjtree) SELECCIONAR */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECCIONAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(seleccionar);
      Tipo_Seleccion();
      jj_consume_token(de);
      L_ID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case donde:
        Donde_Orden();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Tipo_Seleccion() throws ParseException {
                       /*@bgen(jjtree) Tipo_Seleccion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_SELECCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_POR:
        asterisco();
        break;
      case id:
        L_ID();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Donde_Orden() throws ParseException {
                    /*@bgen(jjtree) Donde_Orden */
  SimpleNode jjtn000 = new SimpleNode(JJTDONDE_ORDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Donde();
      jj_consume_token(ordenar);
      jj_consume_token(por);
      Id();
      Orden();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void asterisco() throws ParseException {
                  /*@bgen(jjtree) asterisco */
                  SimpleNode jjtn000 = new SimpleNode(JJTASTERISCO);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_POR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Orden() throws ParseException {
              /*@bgen(jjtree) Orden */
              SimpleNode jjtn000 = new SimpleNode(JJTORDEN);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case asc:
        t = jj_consume_token(asc);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
        break;
      case desc:
        t = jj_consume_token(desc);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.setName(t.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

/*------------------------ Instrucciones DCL --------------------------*/
  final public void Objeto_permiso() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      term_id();
      break;
    case S_POR:
      asterisco();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Base_permisos() throws ParseException {
                      /*@bgen(jjtree) Base_permisos */
  SimpleNode jjtn000 = new SimpleNode(JJTBASE_PERMISOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(permisos);
      term_id();
      jj_consume_token(coma);
      term_id();
      jj_consume_token(punto);
      Objeto_permiso();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OTORGAR() throws ParseException {
                /*@bgen(jjtree) OTORGAR */
  SimpleNode jjtn000 = new SimpleNode(JJTOTORGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(otorgar);
      Base_permisos();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void DENEGAR() throws ParseException {
                /*@bgen(jjtree) DENEGAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDENEGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(denegar);
      Base_permisos();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*------------------------ Instrucciones SSL --------------------------*/


/*----- Declaraciones --------*/
  final public void l_variables() throws ParseException {
                      /*@bgen(jjtree) l_variables */
  SimpleNode jjtn000 = new SimpleNode(JJTL_VARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(100);
      term_id();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        jj_consume_token(coma);
        jj_consume_token(100);
        term_id();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void INSTANCIA() throws ParseException {
                    /*@bgen(jjtree) INSTANCIA */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(100);
      term_id();
      term_id();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VARIABLE() throws ParseException {
                   /*@bgen(jjtree) VARIABLE */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      l_variables();
      TIPO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        complemento_asignacion();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DECLARAR() throws ParseException {
                   /*@bgen(jjtree) DECLARAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(declarar);
      tipo_declaracion();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void tipo_declaracion() throws ParseException {
    if (jj_2_2(3)) {
      INSTANCIA();
    } else if (jj_2_3(3)) {
      VARIABLE();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void complemento_asignacion() throws ParseException {
                                 /*@bgen(jjtree) complemento_asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEMENTO_ASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(101);
      Expresion();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*---- Asignaciones --------*/
  final public void ASIGNACION() throws ParseException {
                   /*@bgen(jjtree) ASIGNACION */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(100);
      Id();
      complemento_asignacion();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*----- Estructuras de control --------*/
  final public void CUERPO() throws ParseException {
               /*@bgen(jjtree) CUERPO */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(abre_llave);
      jj_consume_token(cierra_llave);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//---------------- IF
  final public void SI() throws ParseException {
           /*@bgen(jjtree) SI */
  SimpleNode jjtn000 = new SimpleNode(JJTSI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(si);
      jj_consume_token(abre_par);
      Condicion();
      jj_consume_token(cierra_par);
      CUERPO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SINO() throws ParseException {
             /*@bgen(jjtree) SINO */
  SimpleNode jjtn000 = new SimpleNode(JJTSINO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(sino);
      CUERPO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IF() throws ParseException {
           /*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SI();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sino:
        SINO();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//---------------- PARA
  final public void unario() throws ParseException {
               /*@bgen(jjtree) unario */
               SimpleNode jjtn000 = new SimpleNode(JJTUNARIO);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas_mas:
        t = jj_consume_token(mas_mas);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.setName(t.image);
        break;
      case menos_menos:
        t = jj_consume_token(menos_menos);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setName(t.image);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PARA() throws ParseException {
              /*@bgen(jjtree) PARA */
  SimpleNode jjtn000 = new SimpleNode(JJTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(para);
      jj_consume_token(abre_par);
      jj_consume_token(declarar);
      VARIABLE();
      jj_consume_token(punto_coma);
      Condicion();
      jj_consume_token(punto_coma);
      unario();
      jj_consume_token(cierra_par);
      CUERPO();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

// -------------- mientras
  final public void MIENTRAS() throws ParseException {
                 /*@bgen(jjtree) MIENTRAS */
  SimpleNode jjtn000 = new SimpleNode(JJTMIENTRAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(mientras);
      jj_consume_token(abre_par);
      Condicion();
      jj_consume_token(cierra_par);
      CUERPO();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//============ Detener
  final public void DETENER() throws ParseException {
                /*@bgen(jjtree) DETENER */
  SimpleNode jjtn000 = new SimpleNode(JJTDETENER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(detener);
      jj_consume_token(punto_coma);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//----- Imprimir
  final public void IMPRIMIR() throws ParseException {
                 /*@bgen(jjtree) IMPRIMIR */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(imprimir);
      jj_consume_token(abre_par);
      Expresion();
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//----- fecha
  final public void FECHA() throws ParseException {
              /*@bgen(jjtree) FECHA */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(fecha);
      jj_consume_token(abre_par);
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//----- fechahora
  final public void FECHA_HORA() throws ParseException {
                   /*@bgen(jjtree) FECHA_HORA */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA_HORA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(fecha_hora);
      jj_consume_token(abre_par);
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//------ Contar
  final public void CONTAR() throws ParseException {
               /*@bgen(jjtree) CONTAR */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(contar);
      jj_consume_token(abre_par);
      jj_consume_token(102);
      jj_consume_token(102);
      SELECCIONAR();
      jj_consume_token(103);
      jj_consume_token(103);
      jj_consume_token(cierra_par);
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//------ bACKUPS
  final public void BACK_USQLDUMP() throws ParseException {
                      /*@bgen(jjtree) BACK_USQLDUMP */
  SimpleNode jjtn000 = new SimpleNode(JJTBACK_USQLDUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(usqldump);
      term_id();
      term_id();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void BACK_COMPLETO() throws ParseException {
                      /*@bgen(jjtree) BACK_COMPLETO */
  SimpleNode jjtn000 = new SimpleNode(JJTBACK_COMPLETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(completo);
      term_id();
      term_id();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void op_backup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case completo:
      BACK_COMPLETO();
      break;
    case usqldump:
      BACK_USQLDUMP();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void backup() throws ParseException {
    jj_consume_token(backup);
    op_backup();
  }

// ------------- Restaurar
  final public void REST_USQLDUMP() throws ParseException {
                      /*@bgen(jjtree) REST_USQLDUMP */
  SimpleNode jjtn000 = new SimpleNode(JJTREST_USQLDUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(usqldump);
      Cadena();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void REST_COMPLETO() throws ParseException {
                      /*@bgen(jjtree) REST_COMPLETO */
  SimpleNode jjtn000 = new SimpleNode(JJTREST_COMPLETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(completo);
      Cadena();
      jj_consume_token(punto_coma);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void op_restauracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case completo:
      REST_COMPLETO();
      break;
    case usqldump:
      REST_USQLDUMP();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void restaurar() throws ParseException {
    jj_consume_token(restaurar);
    op_restauracion();
  }

/*----------------------- Inicio Condicion --------------------------*/
  final public void Condicion() throws ParseException {
                  /*@bgen(jjtree) Condicion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpSuma1();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExpSuma1() throws ParseException {
    SimpleNode jjtn001 = new SimpleNode(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      ExpMult1();
      label_9:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(OR);
        ExpMult1();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ExpMult1() throws ParseException {
      SimpleNode jjtn001 = new SimpleNode(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      Term_Condicion();
      label_10:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(AND);
        Term_Condicion();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void Term_Condicion() throws ParseException {
    if (jj_2_6(2)) {
      Nuva_Condicion();
    } else if (jj_2_7(2)) {
      valorBool();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        Nuva_CondicionNOT();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Nuva_CondicionNOT() throws ParseException {
                          /*@bgen(jjtree) Nuva_CondicionNOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNUVA_CONDICIONNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(3)) {
        Nuva_Condicion();
      } else if (jj_2_9(3)) {
        Condicion();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Nuva_Condicion() throws ParseException {
                       /*@bgen(jjtree) Nuva_Condicion */
  SimpleNode jjtn000 = new SimpleNode(JJTNUVA_CONDICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(3)) {
        jj_consume_token(abre_par);
        Condicion();
        jj_consume_token(cierra_par);
      } else if (jj_2_11(3)) {
        Expresion();
        Operador();
        Expresion();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void valorBool() throws ParseException {
                  /*@bgen(jjtree) valorBool */
                  SimpleNode jjtn000 = new SimpleNode(JJTVALORBOOL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t = jj_consume_token(NUM);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setName(t.image);
        break;
      case verdadero:
        t = jj_consume_token(verdadero);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.setName(t.image);
        break;
      case falso:
        t = jj_consume_token(falso);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Operador() throws ParseException {
                            /*@bgen(jjtree) Operador */
                            SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 102:
        t = jj_consume_token(102);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
        break;
      case 103:
        t = jj_consume_token(103);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
        break;
      case 104:
        t = jj_consume_token(104);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case 105:
        t = jj_consume_token(105);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case 106:
        t = jj_consume_token(106);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case 107:
        t = jj_consume_token(107);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*------------------  Inicio Expresion -------------------------*/
  final public void Expresion() throws ParseException {
                  /*@bgen(jjtree) Expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpSuma();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ExpSuma() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTSUMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      ExpResta();
      label_11:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(S_MAS);
        ExpResta();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ExpResta() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTRESTA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      ExpMulti();
      label_12:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(S_MENOS);
        ExpMulti();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ExpMulti() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICACION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      ExpDiv();
      label_13:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(S_POR);
        ExpDiv();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ExpDiv() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTDIVISION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      ExpPot();
      label_14:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(S_DIV);
        ExpPot();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ExpPot() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTPOTENCIA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Termino();
      label_15:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(S_POT);
        Termino();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Termino() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      Id();
      break;
    case abre_par:
      jj_consume_token(abre_par);
      Expresion();
      jj_consume_token(cierra_par);
      break;
    case DECIMAL:
      Decimal();
      break;
    case S_MENOS:
      Negativo();
      break;
    case CADENA:
      Cadena();
      break;
    default:
      jj_la1[36] = jj_gen;
      if (jj_2_17(3)) {
        Fecha();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          Numero();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Negativo() throws ParseException {
                  /*@bgen(jjtree) Negativo */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_MENOS);
      Expresion();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

/*--------------------- Terminales de una expresion ----------------- */
  final public void Decimal() throws ParseException {
                 /*@bgen(jjtree) Decimal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ter_Decimal();
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void Ter_Decimal() throws ParseException {
                            /*@bgen(jjtree) Decimal */
                            SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECIMAL);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Numero() throws ParseException {
               /*@bgen(jjtree) Numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ter_Numero();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Ter_Numero() throws ParseException {
                            /*@bgen(jjtree) Numero */
                            SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Ter_Cadena() throws ParseException {
                            /*@bgen(jjtree) Cadena */
                            SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Cadena() throws ParseException {
               /*@bgen(jjtree) Cadena */
  SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ter_Cadena();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Fecha() throws ParseException {
              /*@bgen(jjtree) Fecha */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ter_Numero();
      jj_consume_token(S_MENOS);
      Ter_Numero();
      jj_consume_token(S_MENOS);
      Ter_Numero();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        Ter_Numero();
        jj_consume_token(dos_puntos);
        Ter_Numero();
        jj_consume_token(dos_puntos);
        Ter_Numero();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Id() throws ParseException {
           /*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term_id();
      label_16:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_16;
        }
        Extra_Id();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void llamada_funcion() throws ParseException {
                        /*@bgen(jjtree) llamada_funcion */
  SimpleNode jjtn000 = new SimpleNode(JJTLLAMADA_FUNCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(abre_par);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_MENOS:
      case abre_par:
      case DECIMAL:
      case NUM:
      case CADENA:
      case id:
        Parametro_Expresion();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(cierra_par);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void id_extra() throws ParseException {
                 /*@bgen(jjtree) id_extra */
  SimpleNode jjtn000 = new SimpleNode(JJTID_EXTRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(punto);
      term_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void term_id() throws ParseException {
                          /*@bgen(jjtree) term_id */
                          SimpleNode jjtn000 = new SimpleNode(JJTTERM_ID);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(id);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Extra_Id() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case abre_par:
      llamada_funcion();
      break;
    case punto:
      id_extra();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Parametro_Expresion() throws ParseException {
                            /*@bgen(jjtree) Parametro_Expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO_EXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expresion();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_17;
        }
        jj_consume_token(coma);
        Expresion();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(coma)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(coma)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_37()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(punto)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(abre_par)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(cierra_par)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(S_MENOS)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(cierra_par)) return true;
    if (jj_scan_token(valores)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(S_MENOS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(S_POT)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(abre_par)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(cierra_par)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(S_DIV)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(S_POR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(S_MENOS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(S_MAS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DATETIME)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(107)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(103)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(falso)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(verdadero)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(abre_par)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(cierra_par)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30001000,0x30001000,0x0,0x0,0x0,0x0,0x1f8000,0x1f8000,0x1f8000,0x178000,0x1000,0x2e06000,0x0,0x0,0x0,0xc0000000,0xc0000000,0x2204000,0x2206000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x702aa,0x702aa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x100,0x100,0x0,0x6000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1f8,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1f8,0x1f8,0x1000000,0x0,0x0,0x0,0x0,0x0,0xe0420000,0x0,0x0,0x0,0x40000,0x0,0x40000,0x1000000,0x0,0x0,0xc000,0x3,0x3,0x800,0x40003000,0x0,0xa0420000,0x40000000,0x40000000,0xe0420000,0x2400000,0x1000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x10,0x10,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0x2,0x0,0x0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[108];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 108; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
