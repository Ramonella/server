/* Generated By:JJTree&JavaCC: Do not edit this line. analizadorTokenManager.java */
package Analizador;
import java.io.*;

/** Token Manager. */
public class analizadorTokenManager implements analizadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffff000L) != 0L || (active1 & 0x31ffL) != 0L)
         {
            jjmatchedKind = 97;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xfb61bbeffffff000L) != 0L || (active1 & 0x31ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x49e441000000000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0xfff7cbeffffef000L) != 0L || (active1 & 0x31ffL) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0x300000000000L) != 0L)
            return 7;
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xfea78befeffe7000L) != 0L || (active1 & 0x3037L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 3;
            }
            return 7;
         }
         if ((active0 & 0x150400010008000L) != 0L || (active1 & 0x1c8L) != 0L)
            return 7;
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xcea78aefefee2000L) != 0L || (active1 & 0x2137L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 4;
            }
            return 7;
         }
         if ((active0 & 0x3000010000105000L) != 0L || (active1 & 0x1000L) != 0L)
            return 7;
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0xc000008080200000L) != 0L || (active1 & 0x20L) != 0L)
            return 7;
         if ((active0 & 0x2ea78a6f6fce2000L) != 0L || (active1 & 0x2117L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x483084167800000L) != 0L || (active1 & 0x10L) != 0L)
            return 7;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2a24822a084e2000L) != 0L || (active1 & 0x2107L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
            return 7;
         }
         return -1;
      case 7:
         if ((active0 & 0x20200220004e2000L) != 0L || (active1 & 0x2004L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0xa04800a08000000L) != 0L || (active1 & 0x103L) != 0L)
            return 7;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x20200220004e2000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active1 & 0x2004L) != 0L)
            return 7;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4e0000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 9;
            }
            return 7;
         }
         if ((active0 & 0x2020022000002000L) != 0L)
            return 7;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4e0000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 10;
            return 7;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 7;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4e0000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 11;
            return 7;
         }
         return -1;
      case 12:
         if ((active0 & 0x480000L) != 0L)
            return 7;
         if ((active0 & 0x60000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 12;
            return 7;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 13;
            return 7;
         }
         if ((active0 & 0x40000L) != 0L)
            return 7;
         return -1;
      case 14:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 14;
            return 7;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 15;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 35:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         return jjStopAtPos(0, 82);
      case 43:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 44:
         return jjStopAtPos(0, 88);
      case 45:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 46:
         return jjStopAtPos(0, 89);
      case 47:
         return jjStopAtPos(0, 83);
      case 58:
         return jjStopAtPos(0, 85);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 61:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 62:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 64:
         return jjStopAtPos(0, 100);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x202060020000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8000008000002000L, 0x40L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4040000104001000L, 0x2L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x486450000000000L, 0x1a0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1200000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x3000000000800000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800000800000000L, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1080400200000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100900000400000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x38020000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x8L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x12100000L, 0x1L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 94:
         return jjStopAtPos(0, 84);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 123:
         return jjStopAtPos(0, 91);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 125:
         return jjStopAtPos(0, 92);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 38:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 43:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x8140004100006000L, active1, 0x180L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x34a6c20001000000L, active1, 0xcL);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 73:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x210000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000118004000000L, active1, 0x62L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000401000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x200012000000L, active1, 0x1L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80800000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000L, active1, 0L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 67:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0xb004000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000001000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x20024004000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4012010000800000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000400000L, active1, 0x40L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x100808040000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400800002000L, active1, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x400002021000000L, active1, 0x190L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x20L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x2001000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x20L);
      case 67:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4a20a0860202000L, active1, 0x110L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000004000L, active1, 0x1L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x800200000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000010000L, active1, 0L);
      case 79:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 7);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x4005000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 82:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x801008000000000L, active1, 0L);
      case 84:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000080000000L, active1, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x1000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 7);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x600400a080000000L, active1, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0020004000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 69:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000040000000L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x800800300800000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x22L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x400080000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x4823000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000200000L, active1, 0x100L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 7);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 7);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x3080164000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x20020000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x402000L, active1, 0L);
      case 69:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x400004000000000L, active1, 0x12L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x201000000L, active1, 0L);
      case 79:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 80:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 7);
         break;
      case 82:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 7);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 7);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x204000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000800000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x5L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000c0000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x408000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000a00002000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x820022000400000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x101L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 7);
         break;
      case 79:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 7);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 7);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 82:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 7);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 7);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 7);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 7);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 7);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 7);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 7);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 7);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 83:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 7);
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 69:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 7);
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 79:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x2020020000000000L, active1, 0L);
      case 80:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 7);
         break;
      case 82:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 7);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 7);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 7);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 7);
         break;
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 7);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 7);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20020000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0L);
      case 82:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 7);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L, active1, 0L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 7);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 81:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 82:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 7);
         break;
      case 83:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(10, 34);
         break;
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 79:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 7);
         break;
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 19, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 18, 7);
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(16, 17, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 3:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39 && kind > 96)
                     kind = 96;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  jjAddStates(3, 4);
                  break;
               case 4:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   9, 10, 12, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\103\122\105\101\122", "\102\101\123\105\137\104\101\124\117\123", "\124\101\102\114\101", 
"\116\165\154\157", "\116\157\40\116\165\154\157", 
"\101\165\164\157\151\156\143\162\145\155\145\156\164\141\142\154\145", "\114\154\141\166\145\137\120\162\151\155\141\162\151\141", 
"\114\154\141\166\145\137\106\157\162\141\156\145\141", "\125\156\151\143\157", "\117\102\112\105\124\117", 
"\120\122\117\103\105\104\111\115\111\105\116\124\117", "\106\125\116\103\111\117\116", "\122\105\124\117\122\116\117", 
"\125\123\125\101\122\111\117", "\103\117\114\117\103\101\122", "\160\141\163\163\167\157\162\144", 
"\125\123\101\122", "\101\114\124\105\122\101\122", "\101\107\122\105\107\101\122", 
"\121\125\111\124\101\122", "\103\101\115\102\111\101\122", "\105\114\111\115\111\116\101\122", 
"\117\142\152\145\164\157\55\125\123\121\114", "\111\116\123\105\122\124\101\122", "\105\116", 
"\101\103\124\125\101\114\111\132\101\122", "\126\101\114\117\122\105\123", "\102\117\122\122\101\122", 
"\104\117\116\104\105", "\123\105\114\105\103\103\111\117\116\101\122", "\104\105", 
"\117\122\104\105\116\101\122", "\120\117\122", "\101\123\103", "\104\105\123\103", 
"\120\105\122\115\111\123\117\123", "\117\124\117\122\107\101\122", "\104\105\116\105\107\101\122", 
"\104\105\103\114\101\122\101\122", "\123\111", "\123\111\116\117", "\123\105\114\105\103\103\111\117\116\101", 
"\103\101\123\117", "\104\105\106\105\103\124\117", "\120\101\122\101", 
"\115\111\105\116\124\122\101\123", "\104\105\124\105\116\105\122", "\111\115\120\122\111\115\111\122", 
"\106\105\103\110\101", "\106\105\103\110\101\137\110\117\122\101", "\103\117\116\124\101\122", 
"\102\101\103\113\125\120", "\125\123\121\114\104\125\115\120", "\103\117\115\120\114\105\124\117", 
"\122\105\123\124\101\125\122\101\122", "\124\105\130\124", "\111\116\124\105\107\105\122", 
"\104\117\125\102\114\105", "\102\117\117\114", "\104\101\124\105", "\104\101\124\105\124\111\115\105", 
"\174\174", "\46\46", "\41", "\146\141\154\163\157", 
"\166\145\162\144\141\144\145\162\157", "\55\55", "\53\53", "\53", "\55", "\52", "\57", "\136", "\72", "\50", "\51", 
"\54", "\56", "\73", "\173", "\175", null, null, null, null, null, null, null, 
"\100", "\75", "\74", "\76", "\74\75", "\76\75", "\75\75", "\41\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "COMMENT2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xff3ffffffffL, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x0L, 
};
static final long[] jjtoMore = {
   0xa00L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[13];
private final int[] jjstateSet = new int[26];
protected char curChar;
/** Constructor. */
public analizadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public analizadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
