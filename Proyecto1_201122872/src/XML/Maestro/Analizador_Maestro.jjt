
options{
	
IGNORE_CASE = false;

STATIC=false;
}

PARSER_BEGIN(Analizador_Maestro)

package XML.Maestro;
import java.io.*;

public class Analizador_Maestro{

}

PARSER_END(Analizador_Maestro)
SKIP:
{
 " "
    |"\r"
    |"\t"
    |"\r\n"
    |"\n"
}


TOKEN:{

< db:"DB">
|< abre_etiqueta:"<">
|< cierra_etiqueta:">">
|< nombre:"nombre">
|< path:"path">
|< diagonal:"/">

}

TOKEN :   //EXPRESONES REGULARES 
{
     <DECIMAL: (["0"-"9"])+("."(["0"-"9"])+)>
  |  < NUM: ["0"-"9"] (["0"-"9"])* >
  |  <CADENA: "\"" (  ~["\""] )* "\"">
  |  <CARACTER: "\'" (["0"-"9"] | ["_","a"-"z","A"-"Z"] | "#" | "$" | "%" | "?" | "Â¿" | "@")  "\'">
  |  < id: <LETRA> (<LETRA>|<DIGITO>)* >
  |  < #LETRA: ["_","a"-"z","A"-"Z"] >
  |  < #DIGITO: ["0"-"9"] >
}


SimpleNode Start():{}{

	Inicio(){return jjtThis;}

}

void Inicio():{}{

	sentencias()
}

void sentencias():{}{

 (base())*

}

void base():{}{

	<abre_etiqueta> <db> <cierra_etiqueta> <abre_etiqueta> <nombre><cierra_etiqueta> term_id() <abre_etiqueta><diagonal><nombre><cierra_etiqueta><abre_etiqueta><path><cierra_etiqueta>ruta()<abre_etiqueta><diagonal><path><cierra_etiqueta><abre_etiqueta> <diagonal><db>  <cierra_etiqueta> 
}


void term_id()  :{Token t;}
{
  t = <id> { jjtThis.setName(t.image); }
}

void ruta()  :{Token t;}
{
  t = <CADENA> { jjtThis.setName(t.image); }
}