options{
	
IGNORE_CASE = false;

STATIC=false;
}

PARSER_BEGIN(Analizador_Tuplas)

package XML.Tuplas_Tabla;
import java.io.*;

public class Analizador_Tuplas{

}

PARSER_END(Analizador_Tuplas)
SKIP:
{
 " "
    |"\r"
    |"\t"
    |"\r\n"
    |"\n"
}


TOKEN:{

< proc:"proc">
|< abre_etiqueta:"<">
|< cierra_etiqueta:">">
|< nombre:"nombre">
|< func:"func">
|< diagonal:"/">
|<params:"params">
|<tip:"tipo">
|<row:"row">

}

TOKEN:{
   < TEXT:"TEXT">
  | < INTEGER:"INTEGER">
  | < DOUBLE:"DOUBLE">
  | < BOOL:"BOOL">
  | < DATE:"DATE">
  | <DATETIME:"DATETIME">
  | <S_MENOS:"-">
  |<dos_puntos:":">

}



TOKEN :   //EXPRESONES REGULARES 
{
     <DECIMAL: (["0"-"9"])+("."(["0"-"9"])+)>
  |  < NUM: ["0"-"9"] (["0"-"9"])* >
  |  <CADENA: "\"" (  ~["\""] )* "\"">
  |  <CARACTER: "\'" (["0"-"9"] | ["_","a"-"z","A"-"Z"] | "#" | "$" | "%" | "?" | "Â¿" | "@")  "\'">
  |  < id: <LETRA> (<LETRA>|<DIGITO>)* >
  |  < #LETRA: ["_","a"-"z","A"-"Z"] >
  |  < #DIGITO: ["0"-"9"] >
}


SimpleNode Start():{}{

	Inicio(){return jjtThis;}

}


void Inicio():{}{

	sentencias()
}


void sentencias():{}
{
	(fila())*
}



void Campo():{}{
 <abre_etiqueta>term_id()<cierra_etiqueta>Termino()<abre_etiqueta><diagonal>term_id()<cierra_etiqueta>

}

void fila():{}{

<abre_etiqueta><row><cierra_etiqueta>
(LOOKAHEAD(2)Campo())*
<abre_etiqueta><diagonal><row><cierra_etiqueta>

}




void Termino() #void :{}
{

	  Decimal()
	| Negativo()
	| Cadena()
    | LOOKAHEAD (3)Fecha()
    | Numero()

} 


void Negativo ():{}
{

   <S_MENOS>Termino() 
}

void Decimal():{}
 {
 	  Ter_Decimal()
 }

void Ter_Decimal()#Decimal:{Token t;}
{
    t = <DECIMAL> { jjtThis.setName(t.image); }
}


void Numero():{}
{
    Ter_Numero()
} 

void Ter_Numero() #Numero :{Token t;}
{
  t = <NUM> { jjtThis.setName(t.image); }
}


void Ter_Cadena() #Cadena :{Token t;}
{
  t = <CADENA> { jjtThis.setName(t.image); }
}

void Cadena():{}
{
  Ter_Cadena()
    
}


void Fecha():{}
{
Ter_Numero() <S_MENOS> Ter_Numero() <S_MENOS> Ter_Numero() (Ter_Numero() <dos_puntos> Ter_Numero() <dos_puntos> Ter_Numero())?
}



void term_id() #term_id :{Token t;}
{
  t = <id> { jjtThis.setName(t.image); }
}


