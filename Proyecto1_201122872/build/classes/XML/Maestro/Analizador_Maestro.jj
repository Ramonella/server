/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Analizador_Maestro.jj */
/*@egen*/
options{
	
IGNORE_CASE = false;

STATIC=false;
}

PARSER_BEGIN(Analizador_Maestro)

package XML.Maestro;
import java.io.*;

public class Analizador_Maestro/*@bgen(jjtree)*/implements Analizador_MaestroTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTAnalizador_MaestroState jjtree = new JJTAnalizador_MaestroState();

/*@egen*/

}

PARSER_END(Analizador_Maestro)
SKIP:
{
 " "
    |"\r"
    |"\t"
    |"\r\n"
    |"\n"
}


TOKEN:{

< db:"DB">
|< abre_etiqueta:"<">
|< cierra_etiqueta:">">
|< nombre:"nombre">
|< path:"path">
|< diagonal:"/">

}

TOKEN :   //EXPRESONES REGULARES 
{
     <DECIMAL: (["0"-"9"])+("."(["0"-"9"])+)>
  |  < NUM: ["0"-"9"] (["0"-"9"])* >
  |  <CADENA: "\"" (  ~["\""] )* "\"">
  |  <CARACTER: "\'" (["0"-"9"] | ["_","a"-"z","A"-"Z"] | "#" | "$" | "%" | "?" | "\u00bf" | "@")  "\'">
  |  < id: <LETRA> (<LETRA>|<DIGITO>)* >
  |  < #LETRA: ["_","a"-"z","A"-"Z"] >
  |  < #DIGITO: ["0"-"9"] >
}


SimpleNode Start():{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
        try {
/*@egen*/

	Inicio()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Inicio():{/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Inicio */
        try {
/*@egen*/

	sentencias()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void sentencias():{/*@bgen(jjtree) sentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) sentencias */
 try {
/*@egen*/

 (base())*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}

void base():{/*@bgen(jjtree) base */
  SimpleNode jjtn000 = new SimpleNode(JJTBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) base */
        try {
/*@egen*/

	<abre_etiqueta> <db> <cierra_etiqueta> <abre_etiqueta> <nombre><cierra_etiqueta> term_id() <abre_etiqueta><diagonal><nombre><cierra_etiqueta><abre_etiqueta><path><cierra_etiqueta>ruta()<abre_etiqueta><diagonal><path><cierra_etiqueta><abre_etiqueta> <diagonal><db>  <cierra_etiqueta>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


void term_id()  :{/*@bgen(jjtree) term_id */
                  SimpleNode jjtn000 = new SimpleNode(JJTTERM_ID);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) term_id */
  try {
/*@egen*/
  t = <id>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ruta()  :{/*@bgen(jjtree) ruta */
               SimpleNode jjtn000 = new SimpleNode(JJTRUTA);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ruta */
  try {
/*@egen*/
  t = <CADENA>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}